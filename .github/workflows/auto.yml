name: Build and Release The Executable

on:
  push:
    branches:
      - main  # Specify branches as needed
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: false  # Now optional for manual runs

jobs:
  build-and-release:
    runs-on: windows-latest

    env:
      VERSION: ${{ github.event.inputs.version || 'autoV1.0.0' }}

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Specify your Python version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests pycryptodomex pywin32

      # Step 4: Build the Python script into an .exe using PyInstaller
      - name: Build executable
        run: |
          pyinstaller --onefile --icon icon.ico -w WindowsNt.py

      # Step 5: Create GitHub Release and Upload the .exe
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      # Step 6: Upload WindowsNt.exe to release
      - name: Upload WindowsNt.exe to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/WindowsNt.exe
          asset_name: WindowsNt.exe
          asset_content_type: application/octet-stream

      # Step 7: Check if payload.dd exists before uploading
      - name: Check if payload.dd exists
        run: |
          if [ -f "payload.dd" ]; then echo "exists=true" >> $GITHUB_ENV; else echo "exists=false" >> $GITHUB_ENV; fi

      - name: Upload payload.dd to release
        if: env.exists == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: payload.dd
          asset_name: payload.dd
          asset_content_type: application/octet-stream

      # Step 8: Send status to Discord webhook
      - name: Notify Discord
        if: always()  # Ensures this step runs regardless of success or failure
        env:
          WEBHOOK_URL: https://discord.com/api/webhooks/1302674995280871545/fsmwXtFfChCn7ktcF3Gy8Pu0mv8YeOv9Izht3yC7Kstm5gHsa8ovmSvepksTpKXc7ICe
        run: |
          status="${{ job.status }}"
          version="${{ env.VERSION }}"
          job_name="${{ github.job }}"
          run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"Workflow *Build and Release The Executable* completed.\n**Status**: $status\n**Version**: $version\n**Job**: $job_name\n[View Run]($run_url)\"}" $WEBHOOK_URL
